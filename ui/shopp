from PyQt5.QtWidgets import (
    QApplication, QMainWindow, QPushButton, QVBoxLayout, QWidget,
    QLabel, QStackedWidget, QHBoxLayout, QStatusBar, QSizePolicy
)
from PyQt5.QtCore import Qt
from PyQt5.QtGui import QFont
from PyQt5.QtGui import QPainter, QColor
from PyQt5.QtCore import Qt, QPoint


class PaintWidget(QWidget):
    """Ein benutzerdefiniertes Widget, das Linien, senkrechte Striche und eine Tabelle zeichnet."""
    def __init__(self, parent=None):
        super().__init__(parent)
        self.setSizePolicy(QSizePolicy.Expanding, QSizePolicy.Expanding)  # Widget soll sich bei Größenänderung anpassen

    def paintEvent(self, event):
        """Methode, die die Linien, das Rechteck, die Tabelle und den Text malt."""
        painter = QPainter(self)

        if not painter.isActive():
            return

        # Malmodus setzen
        painter.setRenderHint(QPainter.Antialiasing)

        width = self.width()
        height = self.height()

        # Anzahl der Zeilen und Spalten
        num_rows = 3
        num_columns = 3

        # Berechnungen für die Positionen der horizontalen und vertikalen Linien
        row_height = height // num_rows
        column_width = width // num_columns

        # Farbe für die Linien
        painter.setPen(QColor("#007AFF"))  # Blau für die horizontalen Linien und vertikalen Striche

        # Horizontale Linien (Zeilen)
        for row in range(1, num_rows):
            y_position = row * row_height  # Berechne die Y-Position für jede horizontale Linie
            painter.drawLine(QPoint(0, y_position), QPoint(width, y_position))  # Horizontale Linie

        # Vertikale Linien (Spalten)
        for col in range(1, num_columns):
            x_position = col * column_width  # Berechne die X-Position für jede vertikale Linie
            painter.drawLine(QPoint(x_position, 0), QPoint(x_position, height))  # Vertikale Linie

        # Rechteck um die gesamte Tabelle
        painter.setPen(QColor("#555555"))  # Dunkelgrau für das Rechteck
        painter.drawRect(0, 0, width - 1, height - 1)  # Rechteck entlang der Widget-Grenzen (leicht versetzt für die Umrandung)

        # Text in jeder Zelle zeichnen
        painter.setPen(QColor("#000000"))  # Schwarz für den Text
        painter.setFont(QFont("San Francisco", 12))  # Schriftart und -größe

        for row in range(num_rows):
            for col in range(num_columns):
                # Berechne die Position der Zelle
                x_position = col * column_width
                y_position = row * row_height

                # Text innerhalb der Zelle (Berechnung der Mitte der Zelle für Textzentrierung)
                text = f"Zelle {row + 1},{col + 1}"  # Beispieltext: Zelle 1,1, Zelle 1,2, etc.
                text_rect = painter.boundingRect(x_position, y_position, column_width, row_height, Qt.AlignCenter, text)
                painter.drawText(text_rect, Qt.AlignCenter, text)  # Text in der Mitte der Zelle zeichnen

        painter.end()






class MainWindow(QMainWindow):
    def __init__(self):
        super().__init__()

        self.setWindowTitle("Mensch töte dich nicht! SHOP")
        self.setGeometry(100, 100, 800, 600)

        # Haupt-Widget und Layout
        self.centralwidget = QWidget(self)
        self.setCentralWidget(self.centralwidget)
        self.layout = QVBoxLayout(self.centralwidget)

        # Weitere Layout-Inhalte (falls benötigt)
        # Hier können Sie weitere Widgets hinzufügen, die unter dem PaintWidget platziert werden

        self.setCentralWidget(self.centralwidget)

        # Header-Bereich hinzufügen
        self.header_layout = QHBoxLayout()
        self.layout.addLayout(self.header_layout)

        # Zurück-Button
        self.back_button = QPushButton("Zurück")
        self.back_button.setStyleSheet(""" 
            QPushButton {
                background-color: #D3D3D3;
                color: black;
                border-radius: 5px;
                font-size: 12px;
                padding: 5px 10px;
                border: 1px solid #A9A9A9;
            }
            QPushButton:hover {
                background-color: #C0C0C0;
            }
            QPushButton:pressed {
                background-color: #A9A9A9;
            }
        """)
        self.back_button.setVisible(False)  # Versteckt im Hauptmenü
        self.back_button.clicked.connect(lambda: self.switch_page(0))
        self.header_layout.addWidget(self.back_button, alignment=Qt.AlignLeft)

        # Stretch zwischen den Buttons und Header
        self.header_layout.addStretch()

        # Header
        self.header = QLabel("Mensch töte dich nicht! - SHOP", self)
        self.header.setAlignment(Qt.AlignCenter)
        self.header.setFont(QFont("San Francisco", 24, QFont.Bold))
        self.header.setStyleSheet("color: #333333; padding: 10px;")
        self.header.setSizePolicy(QSizePolicy.Expanding, QSizePolicy.Preferred)
        self.header_layout.addWidget(self.header, alignment=Qt.AlignCenter)

        # Stretch nach dem Header
        self.header_layout.addStretch()

        # QStackedWidget für wechselnde Inhalte
        self.stacked_widget = QStackedWidget()
        self.layout.addWidget(self.stacked_widget)

        # Seiten hinzufügen
        self.main_menu = self.create_main_menu()
        self.item_shop = self.create_item_shop()
        self.skin_shop = self.create_skin_shop()
        self.map_shop = self.create_map_shop()
        self.marketplace = self.create_marketplace()

        self.stacked_widget.addWidget(self.main_menu)  # Seite 0
        self.stacked_widget.addWidget(self.item_shop)  # Seite 1
        self.stacked_widget.addWidget(self.skin_shop)  # Seite 2
        self.stacked_widget.addWidget(self.map_shop)  # Seite 3
        self.stacked_widget.addWidget(self.marketplace)  # Seite 4

        # Statusleiste
        self.statusbar = QStatusBar()
        self.setStatusBar(self.statusbar)

    def create_main_menu(self):
        """Erstelle die Hauptmenü-Seite."""
        page = QWidget()
        layout = QVBoxLayout(page)

        # Buttons
        self.create_button(layout, "Item SHOP", lambda: self.switch_page(1))
        self.create_button(layout, "Skin SHOP", lambda: self.switch_page(2))
        self.create_button(layout, "Map SHOP", lambda: self.switch_page(3))
        self.create_button(layout, "Marketplace", lambda: self.switch_page(4))

        return page

    def create_item_shop(self):
        """Erstelle die Item SHOP-Seite."""
        page = QWidget()
        layout = QVBoxLayout(page)

        # Füge das benutzerdefinierte PaintWidget hinzu
        self.paint_widget = PaintWidget()
        self.paint_widget.setSizePolicy(QSizePolicy.Expanding, QSizePolicy.Expanding)  # Vollständige Größenanpassung
        layout.addWidget(self.paint_widget)

        # Verringere den Abstand zwischen dem PaintWidget und den Buttons
        layout.setSpacing(0)  # Setzt den Abstand zwischen den Widgets im Layout auf 0
        layout.setContentsMargins(0, 0, 0, 0)  # Entfernt den Abstand um das Layout herum

        # Stretch oben, damit der Inhalt nach unten verschoben wird
        layout.addStretch()

        # Layout für den unteren Bereich, um Buttons nebeneinander zu platzieren
        button_layout = QHBoxLayout()

        # Button für die linke Ecke
        left_button = QPushButton("<- Links")
        left_button.setStyleSheet(""" 
            QPushButton {
                background-color: #007AFF;
                color: white;
                border-radius: 10px;
                font-size: 20px;
                font-family: 'San Francisco', sans-serif;
                padding: 8px 16px;
                border: none;
                text-align: center;
            }
            QPushButton:hover {
                background-color: #005BB5;
            }
            QPushButton:pressed {
                background-color: #003F87;
            }
        """)
        left_button.setFixedWidth(200)  # Breite des Buttons halbieren
        left_button.clicked.connect(lambda: self.show_message("Seite 1!"))
        button_layout.addWidget(left_button, alignment=Qt.AlignLeft)  # Button ganz links ausrichten

        # Stretch zwischen den Buttons, um Platz für den rechten Button zu schaffen
        button_layout.addStretch()

        # Button für die rechte Ecke
        right_button = QPushButton("Rechts ->")
        right_button.setStyleSheet(""" 
            QPushButton {
                background-color: #007AFF;
                color: white;
                border-radius: 10px;
                font-size: 20px;
                font-family: 'San Francisco', sans-serif;
                padding: 8px 16px;
                border: none;
                text-align: center;
            }
            QPushButton:hover {
                background-color: #005BB5;
            }
            QPushButton:pressed {
                background-color: #003F87;
            }
        """)
        right_button.setFixedWidth(200)  # Breite des Buttons halbieren
        right_button.clicked.connect(lambda: self.show_message("Seite 2!"))
        button_layout.addWidget(right_button, alignment=Qt.AlignRight)  # Button nach rechts ausrichten

        # Füge das Button-Layout zum Hauptlayout hinzu
        layout.addLayout(button_layout)

        return page

    def create_skin_shop(self):
        """Erstelle die Skin SHOP-Seite.""" 
        page = QWidget()
        layout = QVBoxLayout(page)

        # Stretch nach oben, um den Button nach unten zu verschieben
        layout.addStretch()

        # Inhalte des Item-Shops
        self.create_button(layout, "Kaufen", lambda: self.show_message("Kauf abgeschlossen!"))

        return page
    
    def create_map_shop(self):
        """Erstelle die Map SHOP-Seite.""" 
        page = QWidget()
        layout = QVBoxLayout(page)

        # Stretch nach oben, um den Button nach unten zu verschieben
        layout.addStretch()

        # Inhalte des Item-Shops
        self.create_button(layout, "Kaufen", lambda: self.show_message("Kauf abgeschlossen!"))

        return page
    
    def create_marketplace(self):
        """Erstelle die Marketplace-Seite.""" 
        page = QWidget()
        layout = QVBoxLayout(page)

        # Stretch nach oben, um den Button nach unten zu verschieben
        layout.addStretch()

        # Inhalte des Item-Shops
        self.create_button(layout, "Kaufen", lambda: self.show_message("Kauf abgeschlossen!"))

        return page
    
    def create_button(self, layout, text, callback):
        """Hilfsfunktion zum Erstellen von Buttons.""" 
        button = QPushButton(text)
        button.setStyleSheet(""" 
            QPushButton {
                background-color: #007AFF;
                color: white;
                border-radius: 10px;
                font-size: 30px;
                font-family: 'San Francisco', sans-serif;
                padding: 12px 0;
                border: none;
                text-align: center;
            }
            QPushButton:hover {
                background-color: #005BB5;
            }
            QPushButton:pressed {
                background-color: #003F87;
            }
        """)
        button.setMinimumHeight(50)
        layout.addWidget(button)
        button.clicked.connect(callback)

    def switch_page(self, index):
        """Wechsel zwischen Seiten im QStackedWidget.""" 
        self.stacked_widget.setCurrentIndex(index)

        # Steuerung der Sichtbarkeit des Zurück-Buttons
        self.back_button.setVisible(index != 0)

        # Header-Titel aktualisieren
        if index == 0:
            self.header.setText("Mensch ärgere dich nicht! - SHOP")
        elif index == 1:
            self.header.setText("Mensch ärgere dich nicht! - Item SHOP")
        elif index == 2:
            self.header.setText("Mensch ärgere dich nicht! - Skin SHOP")
        elif index == 3:
            self.header.setText("Mensch ärgere dich nicht! - Map SHOP")
        elif index == 4:
            self.header.setText("Mensch ärgere dich nicht! - Marketplace")

    def show_message(self, message):
        """Zeige eine Nachricht in der Statusleiste.""" 
        self.statusbar.showMessage(message, 3000)


# Hauptfunktion
if __name__ == "__main__":
    app = QApplication([])
    window = MainWindow()
    window.show()
    app.exec_()
